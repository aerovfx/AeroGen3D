import os
import gradio as gr
import numpy as np
import trimesh
import tempfile
import threading
from transformers import AutoModelForCausalLM, AutoTokenizer

# T·∫Øt c·∫£nh b√°o parallelism ƒë·ªÉ tr√°nh l·ªói khi ch·∫°y tokenizer
os.environ["TOKENIZERS_PARALLELISM"] = "false"
HF_TOKEN = os.getenv("HF_TOKEN", None)

# Load model and tokenizer
model_path = "Zhengyi/LLaMA-Mesh"
tokenizer = AutoTokenizer.from_pretrained(model_path)
model = AutoModelForCausalLM.from_pretrained(model_path, device_map="auto", torch_dtype="auto")

def chat_llama3_8b(message: str, history: list, temperature: float, max_new_tokens: int) -> str:
    """ Sinh ph·∫£n h·ªìi t·ª´ m√¥ h√¨nh ng√¥n ng·ªØ LLaMA. """
    inputs = tokenizer.encode(message, return_tensors="pt").to(model.device)
    output = model.generate(
        inputs, max_new_tokens=max_new_tokens, temperature=temperature, pad_token_id=tokenizer.eos_token_id
    )
    return tokenizer.decode(output[0], skip_special_tokens=True)

def apply_gradient_color(mesh_text: str) -> str:
    """ Th√™m m√†u gradient v√†o l∆∞·ªõi 3D theo tr·ª•c Y. """
    try:
        with tempfile.NamedTemporaryFile(suffix=".obj", delete=False) as temp_obj:
            temp_obj.write(mesh_text.encode("utf-8"))
            temp_obj.close()
            mesh = trimesh.load_mesh(temp_obj.name)
        
        # Ki·ªÉm tra mesh h·ª£p l·ªá
        if mesh.vertices.shape[0] == 0:
            return "Mesh kh√¥ng h·ª£p l·ªá. Ki·ªÉm tra l·∫°i d·ªØ li·ªáu ƒë·∫ßu v√†o."
        
        y_min, y_max = mesh.vertices[:, 1].min(), mesh.vertices[:, 1].max()
        y_normalized = (mesh.vertices[:, 1] - y_min) / (y_max - y_min + 1e-6)
        colors = np.zeros((mesh.vertices.shape[0], 4))
        colors[:, 0] = np.clip(y_normalized, 0, 1)  # K√™nh ƒë·ªè
        colors[:, 2] = np.clip(1 - y_normalized, 0, 1)  # K√™nh xanh
        colors[:, 3] = 1  # Alpha = 1
        mesh.visual.vertex_colors = (colors * 255).astype(np.uint8)
        
        # L∆∞u mesh ƒë√£ x·ª≠ l√Ω th√†nh file GLB
        with tempfile.NamedTemporaryFile(suffix=".glb", delete=False) as temp_glb:
            mesh.export(temp_glb.name)
            return temp_glb.name
    except Exception as e:
        return f"L·ªói khi x·ª≠ l√Ω mesh: {str(e)}"

def visualize_mesh(mesh_text: str):
    """ Hi·ªÉn th·ªã l∆∞·ªõi 3D t·ª´ vƒÉn b·∫£n OBJ. """
    try:
        with tempfile.NamedTemporaryFile(suffix=".obj", delete=False) as temp_obj:
            temp_obj.write(mesh_text.encode("utf-8"))
            temp_obj.close()
            return temp_obj.name
    except Exception as e:
        return f"L·ªói khi hi·ªÉn th·ªã mesh: {str(e)}"

# Gradio UI
def gradio_interface():
    with gr.Blocks(css=".container { width: 100%; height: 100vh; }") as demo:
        gr.Markdown("## üé® LLaMA 3D Mesh Generator üé®")
        chatbot = gr.Chatbot(height=450, placeholder="Nh·∫≠p m√¥ t·∫£ c·ªßa b·∫°n...")
        
        with gr.Row():
            input_box = gr.Textbox(placeholder="Nh·∫≠p d·ªØ li·ªáu OBJ ho·∫∑c vƒÉn b·∫£n m√¥ t·∫£ 3D", lines=6)
            btn_generate = gr.Button("T·∫°o 3D Mesh")
        
        with gr.Row():
            temperature_slider = gr.Slider(0, 1, 0.7, label="Temperature")
            token_slider = gr.Slider(128, 4096, 2048, label="Max Tokens")
        
        output_mesh = gr.Model3D()
        
        btn_generate.click(fn=apply_gradient_color, inputs=[input_box], outputs=[output_mesh])
    
    return demo

demo = gradio_interface()
demo.launch()
